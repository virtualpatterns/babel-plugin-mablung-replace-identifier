{"version":3,"sources":["../../source/library/visitor.cjs"],"names":["Visitor","BaseVisitor","constructor","babel","_programPath","_importIdentifier","nodeType","onProgramNode","path","onIdentifierNode","state","option","opts","rule","forEach","searchForPattern","Is","regexp","searchFor","RegExp","parserOption","test","node","name","length","addImport","type","push","source","InvalidImportTypeReplaceIdentifierError","replaceWith","reduce","importIdentifier","index","replace","replaceWithNode","Parser","parseExpression"],"mappings":"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","sourcesContent":["import { addDefault as AddDefaultImport, addNamed as AddNamedImport, addNamespace as AddNamespaceImport, addSideEffect as AddSideEffectImport } from '@babel/helper-module-imports'\nimport Is from '@pwn/is'\nimport * as Parser from '@babel/parser'\nimport { Visitor as BaseVisitor } from '@virtualpatterns/mablung-babel-plugin/visitor'\n\nimport { InvalidImportTypeReplaceIdentifierError } from './error/invalid-import-type-replace-identifier-error.cjs'\n\nclass Visitor extends BaseVisitor {\n\n  constructor(babel) {\n    super(babel)\n\n    this._programPath = null\n    this._importIdentifier = []\n\n  }\n\n  get nodeType() {\n    return [ 'Program', 'Identifier' ]\n  }\n\n  onProgramNode(path) {\n    // console.log(`Visitor.onProgramNode('${path.node.name}')`)\n\n    this._programPath = path\n    this._importIdentifier = []\n\n  }\n\n  onIdentifierNode(path, state) {\n    // console.log(`Visitor.onIdentifierNode('${path.node.name}', state)`)\n\n    let option = state.opts\n    let rule = option.rule\n\n    rule.forEach((rule) => {\n\n      rule.searchForPattern = rule.searchForPattern ? rule.searchForPattern : Is.regexp(rule.searchFor) ? rule.searchFor : new RegExp(rule.searchFor, 'gi')\n      rule.parserOption = rule.parserOption ? rule.parserOption : {}\n\n      if (rule.searchForPattern.test(path.node.name)) {\n\n        // console.log(`Replacing '${path.node.name}' with '${rule.replaceWith}'`)\n\n        // if (rule.parserOption) {\n        //   console.dir(rule.parserOption)\n        // }\n\n        if(this._importIdentifier.length <= 0) {\n\n          rule.addImport = rule.addImport ? rule.addImport : []\n          rule.addImport.forEach((addImport) => {\n\n            switch (addImport.type) {\n              case 'default':\n                this._importIdentifier.push(AddDefaultImport(this._programPath, addImport.source, addImport.option))\n                break\n              case 'named':\n                this._importIdentifier.push(AddNamedImport(this._programPath, addImport.name, addImport.source, addImport.option))\n                break\n              case 'namespace':\n                this._importIdentifier.push(AddNamespaceImport(this._programPath, addImport.source, addImport.option))\n                break\n              case 'sideEffect':\n                AddSideEffectImport(this._programPath, addImport.source)\n                break\n              default:\n                throw new InvalidImportTypeReplaceIdentifierError(addImport.type)\n            }\n            \n          })\n\n          // this supports indexed __importIdentifier (.e.g. __importIdentifier_5)\n          rule.replaceWith = this._importIdentifier.length <= 0 ? rule.replaceWith : this._importIdentifier.reduce((replaceWith, importIdentifier, index) => replaceWith = replaceWith.replace(new RegExp(`__importIdentifier_${index}`, 'gi'), importIdentifier.name), rule.replaceWith)\n          \n          // this supports non-indexed __importIdentifier, as was supported only initially\n          rule.replaceWith = this._importIdentifier.length <= 0 ? rule.replaceWith : rule.replaceWith.replace(new RegExp('__importIdentifier', 'gi'), this._importIdentifier[this._importIdentifier.length - 1].name)\n          \n          rule.replaceWithNode = rule.replaceWithNode ?  rule.replaceWithNode : Parser.parseExpression(rule.replaceWith, rule.parserOption)\n  \n          this._importIdentifier = []\n\n        }\n\n        path.replaceWith(rule.replaceWithNode)\n\n      }\n\n    })\n\n  }\n\n}\n\nexport { Visitor }\n"],"file":"visitor.cjs"}